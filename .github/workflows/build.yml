name: Build, Test and Release

on:
  push:
    tags: [ 'v*' ]

env:
  IMAGE_NAME: darioajr/sbe-codec

permissions:
  contents: read
  checks: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Make mvnw executable
      run: chmod +x mvnw
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests
      run: ./mvnw clean test
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Make mvnw executable
      run: chmod +x mvnw
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build JAR
      run: ./mvnw clean package -DskipTests
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbe-codec-jar
        path: target/sbe-encoder-decoder-*.jar
        retention-days: 30
    
    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: target/sbe-encoder-decoder-*.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  native-build:
    needs: [build, quality]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact-name: sbe-codec-linux
            executable-suffix: ""
          - os: macos-latest
            artifact-name: sbe-codec-macos
            executable-suffix: ""
          - os: windows-latest
            artifact-name: sbe-codec-windows
            executable-suffix: ".exe"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Make mvnw executable
      run: chmod +x mvnw
    
    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm-community'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build with Maven
      run: ./mvnw clean compile test
    
    - name: Build native image
      run: ./mvnw package -Pnative -DskipTests
    
    - name: Upload native executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: target/sbe-encoder-decoder${{ matrix.executable-suffix }}
        retention-days: 30
    
    - name: Release binaries
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: target/sbe-encoder-decoder${{ matrix.executable-suffix }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: [build, quality]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Make mvnw executable
      run: chmod +x mvnw
    
    - name: Prepare metadata
      id: meta
      run: |
        echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "vcs_ref=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - uses: docker/build-push-action@v6
      with:
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        context: .
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          BUILD_DATE=${{ steps.meta.outputs.build_date }}
          VCS_REF=${{ steps.meta.outputs.vcs_ref }}
          VCS_URL=https://github.com/${{ github.repository }}
      
    - name: Update Docker Hub Description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.IMAGE_NAME }}
        short-description: "Practical YAML linting and validation with score, badge and web report"
        readme-filepath: ./README.md

  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Make mvnw executable
      run: chmod +x mvnw
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run SpotBugs analysis
      run: ./mvnw compile spotbugs:check || true
    
    - name: Check code formatting
      run: ./mvnw spotless:check || true
    
    - name: Generate dependency check
      run: ./mvnw dependency-check:check || true
